# Generated by Django 4.0.6 on 2022-07-17 14:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid
import web.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('language', models.CharField(choices=[('EN', 'English'), ('SP', 'Spanish'), ('FR', 'French'), ('GE', 'German'), ('CH', 'Chinese')], default='SP', help_text='Language', max_length=2)),
                ('profile_pic', models.ImageField(blank=True, default='profile/default.png', help_text='Profile pic', null=True, upload_to=web.models.User.image_upload_to)),
                ('birth_date', models.DateField(blank=True, help_text='Birth date', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Clan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Clan name', max_length=30, unique=True)),
                ('description', models.TextField(help_text='Clan description', max_length=300)),
                ('leader', models.CharField(blank=True, help_text='Clan leader', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('game_name', models.CharField(choices=[('LOL', 'League of Legends'), ('RLE', 'Rocket League'), ('VAL', 'Valorant'), ('CSG', 'CS:GO'), ('FIF', 'FIFA'), ('FOR', 'Fortnite'), ('WOW', 'World of Warcraft')], help_text='Games to choose', max_length=3)),
                ('competitive', models.BooleanField(default=True, help_text='A game has competitive ranking or not')),
            ],
        ),
        migrations.CreateModel(
            name='Gamer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Usuario', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('discord', models.CharField(blank=True, help_text='Discord user name', max_length=30)),
                ('steam', models.CharField(blank=True, help_text='Steam user name', max_length=30)),
                ('epic_games', models.CharField(blank=True, help_text='EpicGames user name', max_length=30)),
                ('riot_games', models.CharField(blank=True, help_text='Riot Games user name', max_length=30)),
                ('clan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Clan', to='web.clan')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('on', 'On-line'), ('of', 'Off-line')], default='on', max_length=2)),
                ('first_login', models.DateTimeField(auto_now_add=True)),
                ('last_echo', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Gameship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rank', models.CharField(choices=[('un', 'Unranked'), ('CS:GO', (('s1', 'Silver I'), ('s2', 'Silver II'), ('s3', 'Silver III'), ('s4', 'Silver IV'), ('se', 'Silver Elite'), ('sm', 'Silver Elite Master'), ('g1', 'Gold Nova I'), ('g2', 'Gold Nova II'), ('g3', 'Gold Nova III'), ('gm', 'Gold Nova Master'), ('m1', 'Master Guardian I'), ('m2', 'Master Guardian II'), ('me', 'Master Guardian Elite'), ('dm', 'Distinguished Master Guardian'), ('le', 'Legendary Eagle'), ('lm', 'Legendary Eagle Master'), ('sm', 'Supreme Master First Class'), ('ge', 'The Global Elite'))), ('League of Legends', (('i4', 'Iron IV'), ('i3', 'Iron III'), ('i2', 'Iron II'), ('i1', 'Iron I'), ('b4', 'Bronze IV'), ('b3', 'Bronze III'), ('b2', 'Bronze II'), ('b1', 'Bronze I'), ('s4', 'Silver IV'), ('s3', 'Silver III'), ('s2', 'Silver II'), ('s1', 'Silver I'), ('g4', 'Gold IV'), ('g3', 'Gold III'), ('g2', 'Gold II'), ('g1', 'Gold I'), ('p4', 'Platinum IV'), ('p3', 'Platinum III'), ('p2', 'Platinum II'), ('p1', 'Platinum I'), ('d4', 'Diamond IV'), ('d3', 'Diamond III'), ('d2', 'Diamond II'), ('d1', 'Diamond I'), ('m4', 'Master IV'), ('m3', 'Master III'), ('m2', 'Master II'), ('m1', 'Master I'), ('h4', 'Grand Master IV'), ('h3', 'Grand Master III'), ('h2', 'Grand Master II'), ('h1', 'Grand Master I'), ('ch', 'Challenger'))), ('Rocket League', (('b1', 'Bronze I'), ('b2', 'Bronze II'), ('b3', 'Bronze III'), ('s1', 'Silver I'), ('s2', 'Silver II'), ('s3', 'Silver III'), ('g1', 'Gold I'), ('g2', 'Gold II'), ('g3', 'Gold III'), ('p1', 'Platinum I'), ('p2', 'Platinum II'), ('p3', 'Platinum III'), ('d1', 'Diamond I'), ('d2', 'Diamond II'), ('d3', 'Diamond III'), ('c1', 'Champion I'), ('c2', 'Champion II'), ('c3', 'Champion III'), ('h1', 'Grand Champion I'), ('h2', 'Grand Champion II'), ('h3', 'Grand Champion III'), ('sl', 'Supersonic Legend'))), ('Valorant', (('i1', 'Iron I'), ('i2', 'Iron II'), ('i3', 'Iron III'), ('b1', 'Bronze I'), ('b2', 'Bronze II'), ('b3', 'Bronze III'), ('s1', 'Silver I'), ('s2', 'Silver II'), ('s3', 'Silver III'), ('g1', 'Gold I'), ('g2', 'Gold II'), ('g3', 'Gold III'), ('p1', 'Platinum I'), ('p2', 'Platinum II'), ('p3', 'Platinum III'), ('d1', 'Diamond I'), ('d2', 'Diamond II'), ('d3', 'Diamond III'), ('c1', 'Ascendent I'), ('c2', 'Ascendent II'), ('c3', 'Ascendent III'), ('h1', 'Inmortal I'), ('h2', 'Inmortal II'), ('h3', 'Inmortal III'), ('rl', 'Radiant')))], default='un', help_text='Gamer rank in a Game', max_length=20)),
                ('game', models.ForeignKey(help_text='Game selected', on_delete=django.db.models.deletion.CASCADE, to='web.game')),
                ('gamer', models.ForeignKey(help_text='Gamer that selects a Game', on_delete=django.db.models.deletion.CASCADE, to='web.gamer')),
            ],
            options={
                'unique_together': {('game', 'gamer')},
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('ac', 'Accepted'), ('de', 'Declined'), ('pe', 'Pending')], default='pe', help_text='Friendship request status', max_length=2)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Receiver', to='web.gamer')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Sender', to='web.gamer')),
            ],
            options={
                'unique_together': {('sender', 'receiver')},
            },
        ),
    ]
